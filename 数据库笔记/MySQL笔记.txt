
PHP的价值：通过执行某些PHP代码获取到指定的数据，填充到HTML的指定位置

   1.浏览器：
    1>用户在浏览器中输入URL地址
    2>浏览器解析用户输入的URL地址 => 域名 + 端口
    3>浏览器会先检查本地缓存有没有这个域名 => IP
    4>浏览器要发起一个DNS系统调用 => IP
    5>浏览器会通过一个本地随机端口建立一个与服务端指定端口之间的连接通道 三次握手
    6>浏览器会将客户端的一些信息打上一个“包”
    7>将这个包通过这个连接通道发送到服务端
    8>打开服务端返回的“包”，找到Content-Type
    9>根据Content-Type，决定如何处理响应的内容
    10>如果是HTML则渲染到界面上
      ||
     “包”==>请求报文

    NDS系统调用：
      1.检查操作系统缓存有没有这个域名
      2.找系统的hosts文件中有没有这个域名
      3.如果都没有找到，会对DNS服务器发起一个系统调用 

    DNS：
      

   2.服务器
    Web Server（Apache）
    1>打开客户提交过来的包，拿到包里的请求路径
    2>根据请求的路径对应的文件的拓展名找到文件的 MIME Type
    3>判断文件类型是否为静态文件
    4>如果是静态文件直接读取这个文件的内容
    5>如果不是静态文件，交给“外包公司”
    6>服务端会把要发送给客户端的数据打上一个“包”
    7>将这个包再通过之前的连接通道发回客户端
    ||
    “包”==>响应报文

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

一.HTTP(超文本传输协议)    http（80） https（443）

  PHP中 header 函数专门用于设置响应头
  header('Content-Type: text/html' charset="UTF-8");

  客户端浏览器在接收到这个头信息过后会自动跳转到 指定的地址
  header('Location: 01-content-type.php');


请求行 请求头 空行 请求体   
状态行 响应头 空行 响应体

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

字面量：是代码中数据的表述手段

二.json
     是一张类似于JS的字面量的手段，也是表述数据的手段，现如今用的最多的数据格式
   1.json中 属性名称必须用双引号包裹
   2.json中 字符串必须用双引号包裹
   3.json中 不允许有注释
   4.json中 没有undefined这个值


三.其他
   音乐单词后缀名 .lrc
   accept可以设置两种值  分别为MIME Type/文件拓展名
   multiple可以让一个文件域多选
   strpos();出现的位置  相当于indexof()
   
   将数据转化成json格式 叫做序列化

   保存数据的路径一定使用绝对路径

   pre标签控制自动换行

   Ctrl+shift +G  自动包裹一个盒子

四.路径
  1. 相对路径
    - ./assets/bootstrap.css
    - ../assets/bootstrap.css
    - assets/bootstrap.css
    - 网页中使用（a,link,img,script,location）
    - 代码读写服务端文件时可以用
  2. 绝对路径
    - /assets/bootstrap.css
    - 网页中使用（a,link,img,script,location）
    - 切记不能在文件读写时使用
  3. 物理路径
    - D:\itbetter\03-server-side\archives\day-08\code\songs\bootstrap.css
    - 不可能在网页中使用（a,link,img,script,location）
    - 代码读写服务端文件时可以用

五.数据库
-- SQL 是由一套公共的标准的，不同数据库之间都可以执行，只不过有一些有特性的点

1.安装MySQL步骤：
    cd C:\wamp\MySQL\bin

    mysqld --initialize --user=mysql --console

    mysqld --install MySQL

    mysql -u root -p

    Enter password: ************

    exit;

    show databases;

2. drop删除表 删除数据库（不可逆的操作）

3.操作
  
  --新增
    insert into 表 values (null, 'title', 'name', 18, 0);
    insert into 表 (title, name, age, gender) values ('CEO','张三',18,0);

  --删除
    删除数据一定要配合删除筛选
    delete from 表 where title = 'CEO' and id = 1;
    delete from 表 where id in (1,2,3,4);

  --修改
    update 表 set title = 'CEO', `name` = '张三' where id = 1;
    
  --查询
    select * from 表;
          ||
    如果使用通配符会产生全表扫描，建议指定列名

    select `id`, `title`, `name` from 表
    select语句可以选择列或者具体的值

4.常见的查询函数

  --查询总条数count  select count(具体的值) from 表;
                    select count(1) as count from 表;
  --最大值和最小值 max/min
     select max(id) from 表;
     select min(id) from 表;
  --平均值avg
     select avg(id) from 表;
  --限制取几条(limit)
     select * from 表 limit 2;
  --限制越过几条取几条
     select * from 表 limit skip, length;
     skip = (page -1) * length;


  总结：
   --查询数据语句得到的是结果集
   --增删改语句得到的是执行这个语句受影响的行数
   --子语句不能单独使用，必须配合增删改查


六.PHP使用数据库查询
  1.建立与数据库服务器之间的链接
  mysqli_connect('127.0.0.1', 'root', '123456', '数据库名');

  2.如果需要在调用函数时忽略错误或者警告可以在函数名之前加上@

  3.mysqli_query($connection, 'select * from users;');

  4.释放查询结果集 mysqli_free_result($query);
    关闭连接/炸桥  mysqli_close($connection);

  5.编码问题
  --必须在查询数据之前
  --必须传入连接对象和编码
   mysqli_set_charset($connection,'utf-8');

   --move_uploaded_file 在windows中文系统要求传入的参数如果有中文必须是GBK编码
   --切记在接收文件时注意文件名的